<?xml version="1.0" encoding="utf-8"?>
<project name="NServiceBus" default="build" xmlns="http://nant.sf.net/release/0.85/nant.xsd">
	<property name="solution.dir" value="src"/>
	<property name="solution.file" value="./AllProjects.sln"/>
	<property name="trunk.dir" value="."/>
	<property name="company.name" value="NServiceBus"/>
	<property name="bin.dir" value="bin" />
	<property name="lib.dir" value="external-bin" />
	<property name="build.base" value="build"/>
	<property name="project.fullversion" value="2.0.0.0" dynamic="true" />
	<property name="nant.settings.currentframework" value="net-3.5" />
	<property name="release.dir" value="${trunk.dir}\release"/>
	<property name="binaries.dir" value="${trunk.dir}\binaries"/>
	<property name="output.dir" value="${build.base}\output"/>
	<property name="artifacts.dir" value="artifacts"/>
	<property name="merge.dir" value="${build.base}/merge"/>
	<property name="main.build.dir" value="${build.base}\nservicebus"/>
	<property name="core.build.dir" value="${build.base}\nservicebus.core"/>
	<property name="container.build.dir" value="${build.base}\containers"/>
	<property name="container.output.dir" value="${output.dir}\containers"/>
	<property name="nhibernate.build.dir" value="${build.base}\nhibernate"/>
	<property name="nhibernate.output.dir" value="${output.dir}\nhibernate"/>
	<property name="Is64BitProcess" value="${environment::get-variable('PROCESSOR_ARCHITECTURE')!='x86'}" />
	<property name="architecture" value="x86" dynamic="true" />
	<property name="msmq.version" value="" dynamic="true" />
	<property name="build.dir.absolutepath" value="${path::get-full-path(build.base)}" />
	
			
	<if test="${property::exists('build.number')}">
		<property name="project.fullversion" value="${build.number}" />
	</if>

	<if test="${Is64BitProcess}">
		<property name="architecture" value="x64"/>
	</if>
  <echo message="${architecture}" />
	
	<readregistry  property="msmq.version" key="SOFTWARE\Microsoft\MSMQ\Parameters\CurrentBuild" hive="LocalMachine" failonerror="false"/>
	<echo message="${msmq.version}" />
	<!-- default configuration -->
	<property name="project.config" value="release" />

	<target name="build" depends="build_src,compile_tools,prepare_binaries,compile_samples"/>
	<target name="build_src" depends="clean, init, commonassemblyinfo, compile_main,compile_core,compile_containers,compile_host,test"/>
	
	<target name="init" description="Initializes build properties">
		<tstamp>
			<formatter property="datetime.buildtime" pattern="yyyy-MM-dd, HH:mm:ss" />
		</tstamp>
		<delete dir="${build.base}"/>
		<mkdir dir="${build.base}"/>
		<echo message="Current Directory: ${project::get-base-directory()}"/>
		
			
		<copy todir="${lib.dir}\sqlite" overwrite="true">
			<fileset basedir="${lib.dir}\sqlite\${architecture}">
				<include name="*.*" />
			</fileset>
		</copy>
	</target>

	<target name="clean" description="delete build artifacts">
		<delete dir="${build.base}" failonerror="false" />
	</target>
	
	<target name="commonassemblyinfo" depends="init">
		<echo message="MARKING THIS BUILD AS VERSION ${project.fullversion}" />
		<delete file="${solution.dir}/CommonAssemblyInfo.cs" failonerror="false"/>
		<asminfo output="${solution.dir}/CommonAssemblyInfo.cs" language="CSharp">
			<imports>
				<import namespace="System" />
				<import namespace="System.Reflection" />
				<import namespace="System.Runtime.InteropServices" />
				<import namespace="System.Security" />
			</imports>
			<attributes>
				<attribute type="AssemblyVersionAttribute" value="${project.fullversion}" />
				<attribute type="AssemblyFileVersionAttribute" value="${project.fullversion}" />
				<attribute type="AssemblyCopyrightAttribute" value="Copyright Â© ${company.name} 2007-${datetime::get-year(datetime::now())}" />
				<attribute type="AssemblyProductAttribute" value="${project::get-name()}" />
				<attribute type="AssemblyCompanyAttribute" value="${company.name}" />
				<attribute type="AssemblyConfigurationAttribute" value="${project.config}" />
				<attribute type="AssemblyInformationalVersionAttribute" value="${project.fullversion}" />
				<attribute type="AllowPartiallyTrustedCallersAttribute" asis="true" />
				<attribute type="ComVisibleAttribute" value="false" />
			</attributes>
			<references>
				<include name="System.dll" />
			</references>
		</asminfo>
	</target>

	<target name="compile_main" depends="init">
		<!-- NServiceBus -->
		<foreach 	item="String"
					in="core"
					delim=","
					property="pathToBuild">
			<exec 	program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" 
					commandline="/p:Configuration=${project.config} /p:OutDir=${build.dir.absolutepath}\nservicebus\"
					workingdir="${solution.dir}\${pathToBuild}" />
		</foreach>
		
		<property name="nservicebus.assemblies" value="${main.build.dir}\NServiceBus.dll" dynamic="true" />
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="${main.build.dir}\NServiceBus*.dll" />
					<!-- NServiceBus.dll needs to be first in the list in order to be the "primary assembly so it added explicitly-->"
					<exclude name="${main.build.dir}\NServiceBus.dll" />
				</items>
			</in>
			<do>
				<property name="nservicebus.assemblies" value="${nservicebus.assemblies} ${filename}"/>
			</do>
		</foreach>
		<!-- Create the merged NServiceBus.dll-->
		<mkdir dir="${output.dir}" />
		<exec program="${lib.dir}\ilmerge.exe"
				commandline="/out:${output.dir}\NServiceBus.dll ${nservicebus.assemblies} /target:library /keyfile:NServiceBus.snk /xmldocs /log:build\output.txt"
				workingdir="." />
	
	</target>
	<target name="compile_core" depends="compile_main">	
		<!-- NServiceBus.Core -->
		<foreach 	item="String"
					in="utils,ObjectBuilder,messageInterfaces,encryption,impl\messageInterfaces,config,unicast,impl\unicast\NServiceBus.Unicast.Msmq,impl\unicast\NServiceBus.Unicast.Subscriptions.Msmq,impl\Serializers,impl\ObjectBuilder.Common,impl\encryption,impl\Sagas,grid,impl\SagaPersisters\NHibernateSagaPersister,impl\unicast\NServiceBus.Unicast.Subscriptions.NHibernate"
					delim=","
					property="pathToBuild">
			<exec 	program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" 
					commandline="/p:Configuration=${project.config} /p:OutDir=${build.dir.absolutepath}\nservicebus.core\"
					workingdir="${solution.dir}\${pathToBuild}" />
		</foreach>
		<!-- Create list of all "core" assemblies -->
		<property name="nservicebus.coreassemblies" value="${core.build.dir}\NServiceBus.Objectbuilder.dll" dynamic="true" />
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="${core.build.dir}\NServiceBus*.dll" />
					<include name="${core.build.dir}\antlr*.dll" />
					<include name="${core.build.dir}\common.logging.dll" />
					<include name="${lib.dir}\common.logging.log4net.dll" />
					<include name="${core.build.dir}\Interop.MSMQ.dll" />
					<include name="${core.build.dir}\Spring.Core.dll" />
					<include name="${core.build.dir}\NHibernate*.dll" />
					<include name="${core.build.dir}\FluentNHibernate.dll" />
					<include name="${core.build.dir}\Iesi.Collections.dll" />
					<include name="${core.build.dir}\LinFu*.dll" />
					<exclude name="${core.build.dir}\**Tests.dll" />
					
					<!-- exclude the main dll -->
					<exclude name="${core.build.dir}\NServiceBus.dll" />

					
					<!-- NServiceBus.Objectbuilder.dll needs to be first in the list to be the "primary assembly so it added explicitly-->"
					<exclude name="${core.build.dir}\NServiceBus.Objectbuilder.dll" />
				</items>
			</in>
			<do>
				<property name="nservicebus.coreassemblies" value="${nservicebus.coreassemblies} ${filename}"/>
			</do>
		</foreach>
		<echo message="Creating the merged NServiceBus.Core.dll" />
		<!-- Create the merged NServiceBus.Core.dll-->
		<exec program="${lib.dir}\ilmerge.exe"
				commandline="/out:${output.dir}\NServiceBus.Core.dll ${nservicebus.coreassemblies} /target:library /keyfile:NServiceBus.snk /xmldocs /internalize:ilmerge.exclude /log:build\output_core.txt"
				workingdir="." />

	</target>
	
	
	<target name="compile_containers">
		<!-- Containers -->
		<exec 	program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe"
				commandline="/p:Configuration=${project.config} /p:OutDir=${build.dir.absolutepath}\containers\"
				workingdir="${solution.dir}\impl\ObjectBuilder" />

		<!-- Copy the container assemblies to the output directory -->
		<copy todir="${container.output.dir}">
			<fileset basedir="${container.build.dir}">
				<include name="NServiceBus.ObjectBuilder.Autofac.dll" />
				<include name="NServiceBus.ObjectBuilder.CastleWindsor.dll" />
				<include name="NServiceBus.ObjectBuilder.StructureMap.dll" />
				<include name="NServiceBus.ObjectBuilder.Unity.dll" />
			</fileset>
		</copy>
	</target>
	
	<target name="compile_host">
		<!-- Host -->
		<exec 	program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" 
		        commandline="/p:Configuration=${project.config} /p:OutDir=${build.dir.absolutepath}\host\"
				workingdir="${solution.dir}\host\NServiceBus.Host" />

		<mkdir 	dir="${output.dir}\host" />
		<exec 	program="${lib.dir}\ilmerge.exe"
				commandline="/out:${output.dir}\host\NServiceBus.Host.exe ${build.base}\host\NServiceBus.Host.exe ${build.base}\host\Microsoft.Practices.ServiceLocation.dll ${build.base}\host\Magnum.dll ${build.base}\host\Topshelf.dll /internalize /target:exe /xmldocs /log:build\output_host.txt"
				workingdir="." />
	</target>

	<target name="test">
	
		<nunit2 verbose="true">
			<formatter type="Plain" />
			<test>
				<assemblies>
					<include name="${build.base}\**Tests.dll" />
					<exclude if="${msmq.version == ''}" name="${build.base}\**NServiceBus.Host.Tests.dll" />
				</assemblies>
			</test>
		</nunit2>
	</target>

	<target name="compile_tools">

		<!-- Testing -->
		<exec 	program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe"
				commandline="/p:Configuration=${project.config} /p:OutDir=${build.dir.absolutepath}\testing\"
				workingdir="${solution.dir}\testing" />

		<mkdir 	dir="${output.dir}\testing" />
		<exec 	program="${lib.dir}\ilmerge.exe"
				commandline="/out:${output.dir}\testing\NServiceBus.Testing.dll ${build.base}\testing\NServiceBus.Testing.dll ${build.base}\testing\Rhino.Mocks.dll /target:library /xmldocs /internalize:ilmerge.exclude /keyfile:NServiceBus.snk /log:build\output_testing.txt"
				workingdir="." />

		<!-- distributor -->
		<exec 	program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe"
				commandline="/p:Configuration=${project.config} /p:OutDir=${build.dir.absolutepath}\distributor\"
				workingdir="${solution.dir}\distributor" />
		

		<!-- timeout -->
		<exec 	program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe"
				commandline="/p:Configuration=${project.config} /p:OutDir=${build.dir.absolutepath}\timeout\"
				workingdir="${solution.dir}\timeout" />

		
		<!-- proxy -->
		<exec 	program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe"
				commandline="/p:Configuration=${project.config} /p:OutDir=${build.dir.absolutepath}\proxy\"
				workingdir="${solution.dir}\proxy" />

	
		<!-- Misc -->
		<foreach 	item="String"
					in="tools\management\Grid,tools\management\Errors\ReturnToSourceQueue"
					delim=","
					property="pathToBuild">
			<exec 	program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" 
					commandline="/p:Configuration=${project.config} /p:OutDir=${build.dir.absolutepath}\tools\"
					workingdir="${solution.dir}\${pathToBuild}" />
		</foreach>

		<!-- Compile the gateway  -->
		<property name="gateway.builddir" value="..\..\..\${build.base}\gateway" />

		<exec 	program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe"
				commandline="${solution.dir}\gateway\gateway.sln 
					/nologo 
					/t:Clean
					/t:Rebuild        
					/p:OutDir=${gateway.builddir}\bin\        
					/p:WebProjectOutputDir=${gateway.builddir}\;AspNetConfiguration=${project.config}" 
				workingdir="." />
				  
	</target>

	<target name="compile_samples" depends="prepare_binaries">
		<foreach 	item="String"
					in="AsyncPages,WebServiceBridge,FullDuplex,PubSub,Manufacturing"
					delim=","
					property="pathToBuild">
			<echo message="${pathToBuild}" />
			<exec program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" commandline="/p:Configuration=${project.config}"
					workingdir="${trunk.dir}\samples\${pathToBuild}" />
		</foreach>

	</target>
	
	<target name="prepare_binaries">
		<delete dir="${binaries.dir}" failonerror="false"></delete>
		<mkdir dir="${binaries.dir}" />
		<copy todir="${binaries.dir}">
			<fileset basedir="${output.dir}">
				<include name="NServiceBus*.*" />
			</fileset>
		</copy>
		<copy todir="${binaries.dir}">
			<fileset basedir="${output.dir}\host">
				<include name="*.*" />
			</fileset>
		</copy>
		<copy todir="${binaries.dir}">
			<fileset basedir="${output.dir}\testing">
				<include name="*.*" />
			</fileset>
		</copy>
		<copy todir="${binaries.dir}">
			<fileset basedir="${lib.dir}">
				<include name="log4net.dll" />
				<include name="nunit.framework.dll" />
			</fileset>
		</copy>
		<copy todir="${binaries.dir}">
			<fileset basedir="${lib.dir}\sqlite">
				<include name="*.dll" />
			</fileset>
		</copy>

		<!-- Prepare Containers -->
		<mkdir dir="${binaries.dir}\containers\autofac" />
		<copy todir="${binaries.dir}\containers\autofac">
			<fileset basedir="${lib.dir}">
				<include name="Autofac*.*" />
			</fileset>
		</copy>
		<copy todir="${binaries.dir}\containers\autofac">
			<fileset basedir="${container.build.dir}">
				<include name="NServiceBus.ObjectBuilder.Autofac.dll" />
			</fileset>
		</copy>
    
		<mkdir dir="${binaries.dir}\containers\castle" />
		<copy todir="${binaries.dir}\containers\castle">
			<fileset basedir="${lib.dir}">
				<include name="Castle*.*" />
			</fileset>
		</copy>
		<copy todir="${binaries.dir}\containers\castle">
			<fileset basedir="${container.build.dir}">
				<include name="NServiceBus.ObjectBuilder.CastleWindsor.dll" />
			</fileset>
		</copy>

		<mkdir dir="${binaries.dir}\containers\structuremap" />
		<copy todir="${binaries.dir}\containers\structuremap">
			<fileset basedir="${lib.dir}">
				<include name="StructureMap*.*" />
			</fileset>
		</copy>
		<copy todir="${binaries.dir}\containers\structuremap">
			<fileset basedir="${container.build.dir}">
				<include name="NServiceBus.ObjectBuilder.StructureMap.dll" />
			</fileset>
		</copy>

		<mkdir dir="${binaries.dir}\containers\unity" />
		<copy todir="${binaries.dir}\containers\unity">
		  <fileset basedir="${lib.dir}">
			<include name="Microsoft.Practices.ObjectBuilder2.dll" />
			<include name="Microsoft.Practices.Unity.dll" />
		  </fileset>
		</copy>
		<copy todir="${binaries.dir}\containers\unity">
		  <fileset basedir="${container.build.dir}">
			<include name="NServiceBus.ObjectBuilder.Unity.dll" />
		  </fileset>
		</copy>

	</target>	
	<target name="package" depends="build">
		<delete dir="${release.dir}" failonerror="false"></delete>
		<mkdir dir="${release.dir}" />

		<copy todir="${release.dir}">
			<fileset basedir="${trunk.dir}">
				<include name="binaries\**" />
			</fileset>
		</copy>
		
		<copy todir="${release.dir}">
			<fileset basedir="${trunk.dir}">
				<include name="*.txt" />
			</fileset>
		</copy>

		<!-- Prepare Tools -->
		<copy todir="${release.dir}">
			<fileset basedir="${build.base}">
				<include name="tools\**" />
				
				<exclude name="**.xml" />
				<exclude name="**.pdb" />
			</fileset>
		</copy>
		
		<!-- Prepare Tools -->
		<copy todir="${release.dir}\processes">
			<fileset basedir="${build.base}">
				<include name="timeout\**" />
				<include name="proxy\**" />
				<include name="distributor\**" />
				<include name="gateway\**" />
				
				<exclude name="**.xml" />
				<exclude name="**.pdb" />
			</fileset>
		</copy>
		
		<copy todir="${release.dir}">
			<fileset basedir="${trunk.dir}">
				<include name="docs\**" />
			</fileset>
		</copy>

		<copy todir="${release.dir}">
			<fileset basedir="${trunk.dir}">
				<include name="samples\**" />
				<exclude name="**/obj/**" />
				<exclude name="**/bin/**" />
				<exclude name="**/_ReSharper*/**" />
				<exclude name="**.cache" />
			</fileset>
		</copy>

		<delete dir="${artifacts.dir}" failonerror="false"/>
		<mkdir dir="${artifacts.dir}" />

		<zip zipfile="${artifacts.dir}\NServiceBus.Trunk.${project.fullversion}.zip" includeemptydirs="false" >
			<fileset basedir="${release.dir}">
				<include name="**"/>
			</fileset>

		</zip>
		
		<delete dir="${release.dir}" failonerror="false"/>
		
	</target>
	
	

</project>
