<?xml version="1.0" encoding="utf-8"?>
<project name="NServiceBus" default="build" xmlns="http://nant.sf.net/release/0.85/nant.xsd">
	<property name="solution.dir" value="src"/>
	<property name="solution.file" value="./AllProjects.sln"/>
	<property name="trunk.dir" value="."/>
	<property name="company.name" value="NServiceBus"/>
	<property name="bin.dir" value="bin" />
	<property name="lib.dir" value="external-bin" />
	<property name="build.base" value="build"/>
	<property name="project.fullversion" value="1.10.1.0" dynamic="true" />
	<property name="nant.settings.currentframework" value="net-3.5" />
	<property name="release.dir" value="${trunk.dir}\release"/>
	<property name="output.dir" value="${build.base}\output"/>
	<property name="artifacts.dir" value="artifacts"/>
	<property name="merge.dir" value="${build.base}/merge"/>
	<property name="container.output.dir" value="${output.dir}\containers"/>
	
	<if test="${property::exists('build.number')}">
		<property name="project.fullversion" value="${build.number}" />
	</if>


	<!-- default configuration -->
	<property name="project.config" value="release" />

	<target name="build" depends="build_src,compile_tools,compile_samples"/>
	<target name="build_src" depends="clean, init, commonassemblyinfo, compile_src,merge_src,test"/>
	
	<target name="init" description="Initializes build properties">
		<tstamp>
			<formatter property="datetime.buildtime" pattern="yyyy-MM-dd, HH:mm:ss" />
		</tstamp>
		<delete dir="${build.base}"/>
		<mkdir dir="${build.base}"/>
		<echo message="Current Directory: ${project::get-base-directory()}"/>
	</target>

	<target name="clean" description="delete build artifacts">
		<delete dir="${build.base}" failonerror="false" />
	</target>

	
	<target name="commonassemblyinfo" depends="init">
		<echo message="MARKING THIS BUILD AS VERSION ${project.fullversion}" />
		<delete file="${solution.dir}/CommonAssemblyInfo.cs" failonerror="false"/>
		<asminfo output="${solution.dir}/CommonAssemblyInfo.cs" language="CSharp">
			<imports>
				<import namespace="System" />
				<import namespace="System.Reflection" />
				<import namespace="System.Runtime.InteropServices" />
			</imports>
			<attributes>
				<attribute type="AssemblyVersionAttribute" value="${project.fullversion}" />
				<attribute type="AssemblyFileVersionAttribute" value="${project.fullversion}" />
				<attribute type="AssemblyCopyrightAttribute" value="Copyright Â© ${company.name} 2007-${datetime::get-year(datetime::now())}" />
				<attribute type="AssemblyProductAttribute" value="${project::get-name()}" />
				<attribute type="AssemblyCompanyAttribute" value="${company.name}" />
				<attribute type="AssemblyConfigurationAttribute" value="${project.config}" />
				<attribute type="AssemblyInformationalVersionAttribute" value="${project.fullversion}" />
			</attributes>
			<references>
				<include name="System.dll" />
			</references>
		</asminfo>
	</target>

	<target name="compile_src" depends="init">

		<foreach 	item="String"
					in="ObjectBuilder,utils,core,messageInterfaces,impl\messageInterfaces,config,unicast,impl\unicast\NServiceBus.Unicast.Msmq,impl\unicast\NServiceBus.Unicast.Subscriptions.Msmq,impl\unicast\NServiceBus.Unicast.Subscriptions.DB,impl\SagaPersisters\NHibernateSagaPersister,impl\Serializers,impl\ObjectBuilder.Common,grid"
					delim=","
					property="pathToBuild">
			<exec program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" commandline="/p:Configuration=${project.config}"
					workingdir="${solution.dir}\${pathToBuild}" />
		</foreach>

	</target>
	
	<target name="test" depends="compile_src">
		<exec program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" commandline="/p:Configuration=${project.config}"
				workingdir="${solution.dir}\tests\NServiceBus.UnitTests" />
		
		<nunit2>
			  <formatter type="Plain" />
			  <test assemblyname="${solution.dir}\tests\NServiceBus.UnitTests\bin\${project.config}\NServiceBus.UnitTests.dll"/>
		</nunit2>
	</target>

	<target name="merge_src">

		<delete dir="${merge.dir}" failonerror="false"></delete>
		<delete dir="${output.dir}" failonerror="false"></delete>
		<mkdir dir="${merge.dir}" />
		<mkdir dir="${output.dir}" />
		
		<copy todir="${merge.dir}">
			<fileset basedir="${build.base}">
				<include name="*.*" />
			</fileset>
		</copy>

		<copy todir="${merge.dir}">
			<fileset basedir="${lib.dir}">
				<include name="*.*" />
			</fileset>
		</copy>

		<!-- Create list of all "core" assemblies -->
		<property name="nservicebus.coreassemblies" value="${merge.dir}\NServiceBus.dll" dynamic="true" />

		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="${merge.dir}\NServiceBus*.dll" />
					<include name="${merge.dir}\antlr.runtime.dll" />
					<include name="${merge.dir}\common.logging*.dll" />
					<include name="${merge.dir}\Interop.MSMQ.dll" />
					<include name="${merge.dir}\spring*.dll" />
					<!-- NServiceBus.dll needs to be first in the list to be the "primary assembly so it added explicitly-->"
					<exclude name="${merge.dir}\NServiceBus.dll" />
				</items>
			</in>
			<do>
				<property name="nservicebus.coreassemblies" value="${nservicebus.coreassemblies} ${filename}"/>
			</do>
		</foreach>

		<!-- Create list of all "external" assemblies that NSB needs -->
		<property name="nservicebus.externalassemblies" value="" dynamic="true" />

		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="${merge.dir}\castle*.dll" />
					<include name="${merge.dir}\structuremap*.dll" />
					<include name="${merge.dir}\autofac.dll" />
				</items>
			</in>
			<do>
				<property name="nservicebus.externalassemblies" value="${nservicebus.externalassemblies} ${filename}"/>
				<echo message="${filename}"/>
			</do>
		</foreach>
		
		<mkdir dir="${output.dir}\coreonly" />

		<!-- Create the "coreonly" version NServiceBus.dll-->
		<exec 	program="${lib.dir}\ilmerge.exe"
				commandline="/out:${output.dir}\coreonly\NServiceBus.dll ${nservicebus.coreassemblies} /target:library /xmldocs /log:build\output_coreonly.txt"
				workingdir="." />
				
    <!-- Containers -->
    <exec program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" commandline="/p:Configuration=${project.config}"
				workingdir="${solution.dir}\impl\ObjectBuilder" />

    <!-- Copy the container assemblies to the output directory -->
    <copy todir="${container.output.dir}">
			<fileset basedir="${build.base}">
          <include name="NServiceBus.Containers.*.dll" />
					<include name="NServiceBus.ObjectBuilder.CastleWindsor*.dll" />
					<include name="NServiceBus.ObjectBuilder.StructureMap*.dll" />
			</fileset>
		</copy>
		
    <!-- Create list of all container implementation assemblies -->
		<property name="nservicebus.containerassemblies" value="" dynamic="true" />

		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="${build.base}\NServiceBus.Containers.*.dll" />
					<include name="${build.base}\NServiceBus.ObjectBuilder.CastleWindsor*.dll" />
					<include name="${build.base}\NServiceBus.ObjectBuilder.StructureMap*.dll" />
				</items>
			</in>
			<do>
				<property name="nservicebus.containerassemblies" value="${nservicebus.containerassemblies} ${filename}"/>
				<echo message="${filename}"/>
			</do>
		</foreach>

		<!-- Create the full NServiceBus.dll-->
		<exec 	program="${lib.dir}\ilmerge.exe"
				commandline="/out:${output.dir}\NServiceBus.dll ${output.dir}\coreonly\NServiceBus.dll ${nservicebus.containerassemblies} ${nservicebus.externalassemblies} /target:library /xmldocs /log:build\output.txt "
				workingdir="." />
	</target>

	<target name="compile_tools">

	    <!-- Testing -->
		<exec program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" commandline="/p:Configuration=${project.config}"
				workingdir="${solution.dir}\testing" />

		<mkdir dir="${output.dir}\testing" />
		<exec 	program="${lib.dir}\ilmerge.exe"
			commandline="/out:${output.dir}\testing\NServiceBus.Testing.dll ${merge.dir}\NServiceBus.Testing.dll ${merge.dir}\Rhino.Mocks.dll /target:library /xmldocs /log:build\output_testing.txt"
			workingdir="." />

		<!-- Misc -->
		<foreach 	item="String"
					in="distributor\NServiceBus.Unicast.Distributor,distributor\MsmqWorkerAvailabilityManager,distributor\NServiceBus.Unicast.Distributor.Runner,tools\management\Grid,tools\management\Errors\ReturnToSourceQueue,timeout"
					delim=","
					property="pathToBuild">
			<echo message="${pathToBuild}" />
			<exec program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" commandline="/p:Configuration=${project.config}"
					workingdir="${solution.dir}\${pathToBuild}" />
		</foreach>

		<!-- Host -->
		<exec program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" commandline="/p:Configuration=${project.config}"
				workingdir="${solution.dir}\host\NServiceBus.Host" />

		<mkdir dir="${output.dir}\host" />
		<exec 	program="${lib.dir}\ilmerge.exe"
			commandline="/out:${output.dir}\host\NServiceBus.Host.exe ${build.base}\host\NServiceBus.Host.exe ${build.base}\host\Microsoft.Practices.ServiceLocation.dll ${build.base}\host\Topshelf.dll /internalize /target:exe /xmldocs /log:build\output_host.txt"
			workingdir="." />

	  <!-- Compile the gateway -->
		<property name="gateway.builddir" value="..\..\..\${build.base}\gateway" />

		<exec program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe"
				  commandline="${solution.dir}\gateway\gateway.sln 
					/nologo 
					/t:Clean
					/t:Rebuild        
					/p:OutDir=${gateway.builddir}\bin\        
					/p:WebProjectOutputDir=${gateway.builddir}\;AspNetConfiguration=${project.config}" 
				  workingdir="." />
	</target>

	<target name="compile_samples">
		<foreach 	item="String"
					in="AsyncPages,WebServiceBridge,FullDuplex,PubSub,Manufacturing"
					delim=","
					property="pathToBuild">
			<echo message="${pathToBuild}" />
			<exec program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" commandline="/p:Configuration=${project.config}"
					workingdir="${trunk.dir}\samples\${pathToBuild}" />
		</foreach>

	</target>

	<target name="package" depends="build">
		<delete dir="${release.dir}" failonerror="false"></delete>
		<mkdir dir="${release.dir}" />

		<copy todir="${release.dir}">
			<fileset basedir="${output.dir}">
				<include name="**" />
			</fileset>
		</copy>
		<copy todir="${release.dir}">
			<fileset basedir="${trunk.dir}">
				<include name="*.txt" />
				<include name="*.vbs" />
			</fileset>
		</copy>

		<mkdir dir="${release.dir}\coreonly\castle" />
		<copy todir="${release.dir}\coreonly\castle">
			<fileset basedir="${lib.dir}">
				<include name="Castle*.*" />
			</fileset>
		</copy>
		<mkdir dir="${release.dir}\coreonly\spring" />
		<copy todir="${release.dir}\coreonly\spring">
			<fileset basedir="${lib.dir}">
				<include name="Spring*.*" />
			</fileset>
		</copy>

		<mkdir dir="${release.dir}\coreonly\structuremap" />
		<copy todir="${release.dir}\coreonly\structuremap">
			<fileset basedir="${lib.dir}">
				<include name="StructureMap*.*" />
			</fileset>
		</copy>
		
		<mkdir dir="${release.dir}\coreonly\autofac" />
		<copy todir="${release.dir}\coreonly\autofac">
			<fileset basedir="${lib.dir}">
				<include name="Autofac*.*" />
			</fileset>
		</copy>

		<mkdir dir="${release.dir}\tools" />
		<copy todir="${release.dir}\tools">
			<fileset basedir="${build.base}">
				<include name="tools\**" />
				<include name="timeout\**" />
				<include name="distributor\**" />
				<include name="gateway\**" />
				<exclude name="**/NServiceBus.dll"/>
				<exclude name="**/NServiceBus.xml"/>
				<exclude name="**/NServiceBus.pdb"/>
			</fileset>
		</copy>
		
		<mkdir dir="${release.dir}\NHibernate" />
		<copy todir="${release.dir}\NHibernate">
			<fileset basedir="${lib.dir}">
				<include name="NHibernate*" />
				<include name="Iesi.Collections*" />
			</fileset>
		</copy>
		
		<copy todir="${release.dir}">
			<fileset basedir="${trunk.dir}">
				<include name="docs\**" />
			</fileset>
		</copy>

		<delete dir="${artifacts.dir}" failonerror="false"/>
		<mkdir dir="${artifacts.dir}" />

		<zip zipfile="${artifacts.dir}\NServiceBus.Trunk.${project.fullversion}.zip" includeemptydirs="false" >
			<fileset basedir="${release.dir}">
				<include name="**"/>
			</fileset>

		</zip>
	</target>
</project>
